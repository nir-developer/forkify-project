
KEY NOTES: 

        OVERVIEW:
         Any real world app has 2 special modules that are independent from the
         rest of the architecture:config.js , helpers.js: 


        TASK LIST:

                        1.Project configuration module 
                                config.js: 
                                        API_URL 
                                        TIMEOUT_SEC=10
                

                        2.General Helper function for the entire project 
                                helpers.js: 
                                       1.timeout(sec)(promisify the timeout)
                                       2. getJSON(url) :
                                         Refactor the current logic in the model of
                                         fetching recipe,converting it to json , Error handling(for now in the console) 
                                              
                                                const res = await fetch(`${API_URL}${id}`); 
                                                const data =await res.json(); 
                                                if(!res.ok) throw new Error(`${data.message} (${res.status})`)

                                         Into a single reusable function getJSON() in the helpers.js file 
                                         
                                                NOTE: USE Promise.race([timeout(10), fetch()])







       



        2. Error Handling: 
                 
                 The model calls the getJSON() - so the model should handle the error if getJSON throw errors! 
                 => the getJSON - must RE-THROW THE ERROR FROM IT'S CATCH -OTHERWISE THE RETURNED PROMISE 
                  WILL NOT BE A REJECTED PROMISE - IT WILL BE A RESOLVED PROMISE 
                         WITH UNDEFINED VALUE!
                        
                         Model: received resolved promise - data:  undefine

                SINCE THE MODEL CALLS THE getJSON() function - it should handle it's Errors 

               -  ASYNC FUNCTION THAT  CALLS AN ASYNC FUNCTION 



        3.Helpers.js Functions: 
                1.getJSON() : 
                2.timeout Implement a timeout function - that returns a rejected promise after sec 
                        Use Promise.race([timeout, fetch]) 
                


                

---------------------------------------------------
TASK LIST: 
----------------------------------------------------

        1.Create the config.js file - with the constants: 
               
                API_URL=http://localhost:3000/forkify/api/v1/
 
                and import it into the model to be used





