
KEY NOTES: 


    - DESIGN: 
        -MODEL: 

        
            - loadRecipe: 
                - does not return any thing - only update the model state object((which effect the controller (read (2 LIVE CONNECTION))))
                - not a clean function - since it change the global state object (but ok..)



        -VIEW: 

            1.Why using class? 
                - since otherwise there will be:
                    - I want each view to have PRIVATE properties and methods 
                    - duplicate code!
                            -  each view has common functions: render, generateMarkup 
                            -  each view has common properties: parentElement and data 
                    - functions are very long- and file will be huge 



            2. Why not exporting the RecipeView class from the recipeView.js module 
                 but instead importing a single instance created in the viewRecipe.js module
                 BECAUSE OTHERWISE: 
                    - THE CONTROLLER WOULD BE ABLE TO CREATE MORE THAN ONE INSTANCE OF THE VIEW 
                    - THE CONTROLLER SHOULD NOT DO EXTRA WORK
                    - THE CONTROLLER DOES NOT NEED TO KNOW HOW A VIEW IS CREATED : 
                            WOULD CREATE THE VIEW INSTANCE/S BY PASSING IT PARAMETERS TO THE CONSTRUCTOR
                            WHICH IS LESS CLEAN CODE(I WANT MIN NUMBER OF ARGS OR ZERO ARGS!)
                    - NO ONE OTHER THAN THE VIEW CLASS SHOULD HAVE ACCESS TO THE INTERNALS 
                

            3.PRIVATE METHODS AND PROPERTIES AND PUBLIC API:                     
                    public methods : render(data), renderSpinner()- the controller will call these methods! 
                    public properties: NONE! (class encapsulation)
                    private properties: #data, #parentElement //CONTROLLER SHOULD NOT KNOW!!
                    private methods:#generateMarkup() , #clear() //CONTROLLER SHOULD NOT KNOW ABOUT THEM!
                
            4.IMPORTANT:BY ENCAPSULATING SOME THE parentEl INTO A PRIVATE PROPERTY 
                THE CONTROLLER CALLS ARE SIMPLER! NO NEED TO PASS THE ANY ARG TO render()! like the parentElement 
                THE ONLY PIECE OF DATA THE CONTROLLER KNOW ABOUT THE VIEW IS THE data IT PASSES IT!
               =>THEREFORE THE  PUBLIC API: render()  and renderSpinner() - WILL BE A GOOD FIT TO BE REUSED IN OTHER VIEWS 
                    THE CONCRETE IMPLEMENTATION OF THE render() -  WILL BE POLYMORPHIC!
                
        



            4.How to pass data to the view(since it does not have any constructor)
                By passing data value in an arg to the render() method - that will set the private #data property 
                recipeView.render(model.state.recipe)

                    



                



    2.  MODULE LIVE CONNECTION: 
            controller and model Modules have live connection 
            the model only need to updte it's state - and does  need to return values from the loadRecipe method 
            since when the model state is changed 
            it will be reflected in the controller that has dependency on the state object









TASK LIST: REFACTORING THE CURRENT IMPLEMENTATION OF LOADING AND RENDERING A RECIPE TO MVC  

    1.Create the model module as described in the forkify-architecture-recipe-loading 

    2. Update the controller: 
            -Extract the logic of fetching recipe from the API to the model loadRecipe function 
             and rename the controller function name to recipeController
             test the refactoring in step 1 : OK! 
             (DONT TEST FOR ERRORS FOR NOW!!!!!! LATER ERROR HANDLING)


    3. " "recipeView class ""   




