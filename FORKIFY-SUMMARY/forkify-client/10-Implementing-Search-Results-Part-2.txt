LECTURE 298 


KEY NOTES: 

   0. After this lecture: I will have the Architecture part implemented: 
        
        User searches(form submit event ) =>  Load searchResults From API => Render the SearchResults on UI ! 

    1.Rendering the search results  - REFACTORING
      BUT FIRST !!  REFACTOR THE VIEWS - CREATE A COMMON BASE CLASS FOR VIEWS THAT RENDERS MARKUP!!

    
    2.BABEL & PARCEL: 
         
         2.1 DONT SUPPORT PRIVATE CLASS FIELDS/METHODS WITH INHERITANCE!
                => USE PROTECTED CLASS FIELDS/METHODS INSTEAD(CHANGE '#' TO '_')
                
         2.2.Must Import the icons with Parcel on any module that uses them!

          2.3 ACTIVATE PARCEL HOT RELOAD REPLACEMENT - IN THE CONTROLLER 
                
                NOTE:  console.log() Reload the entire page 

 

     3.HANDLING AN EMPTY SEARCH RESULTS BY THE CLIENT APP - AS AN ERROR 
        WHEN API RETURNS EMPTY ARRAY FOR SEARCH RESULTS 
        THEN THE CLIENT APP SHOULD HANDLE IT AS AN ERROR!
        BY RENDERING AN ERROR MESSAGE

        THIS IS A COMMON LOGIC FOR BOTH  RecipeView and ResultsView ! 
        => Implement this in the render() method of the View 
         by gourd class that checks if data is falsy(null|| undefined)
         of the data is an Array and it is empty

        




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
    TASK LIST: REFACTORING !! 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        Create a new View ResultsView - which is very similar to RecipeView 

         => REFACTORING!!  

           - Extract a base View class from the current RecipeView  
           
           - The View class will contains common class fields and methods for RecipeView and ResultsView:
                
                -Common Class Fields 

                        - #data


                - Common Class Methods: IMPLEMENTED ON THE BASE VIEW!

                        - render(data) 

                        - renderSpinner() 

                        - renderMessage() 

                         #clear() 

                

           - CLASS SPECIFIC PROPERTIES AND METHODS FOR EACH CLASS(NOT ON THE VIEW BASE CLASS)
            
                ALL PROPERTIES AND METHODS OTHER THAN  THE BELOW{} - ARE COMMON!
                         { addHandlerRender and _generateMarkup(), _errorMessage, _parentElement and _message}


                SPECIFIC CLASS PROPERTIES: (IN SUBCLASS - NOT IN VIEW BASE)

                        #parentElement (only the actual view implementation know it's parent )

                        #errorMessage ('' error message)

                        #message ('' message)


                SPECIFIC CLASS METHODS  (IN SUBCLASS - NOT IN VIEW BASE)

                        #generateMarkup() (only the actual view implementation knows the markup it should render)

                        addHandlerRender(handler) 

                       

                







                  



