
LECTURE 289: LOADING A RECIPE FROM API 

  
KEY NOTES: 

    - THE API DATA / ERROR IN THE RESPONSE - AND HANDLE ERROR IN MY CLIENT ACCORDINGLY 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'use strict'

TEST API END POINT FOR GETTING A SINGLE RECIPE BY ID :NOTE THE API RETURNS 500 when request the root url
https:forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bcd09
5ed6604591c37cdc054bcd09
const url = `https:forkify-api.herokuapp.com/api/v2/recipes/`

const showRecipe = async() =>{
    try 
    {
        const res = await fetch(`${url}5ed6604591c37cdc054bcd09`); 
        const data =await res.json(); 


       if(!res.ok) throw new Error(`${data.message} (${res.status})`)
        console.log(res, data)

        REFORMAT THE RECIPE SHAPE - RENAME THE API PROPERTIES NAMES :
        let {recipe} = data.data;
        console.log(recipe)

        recipe = {
            id:recipe.id, 
            title:recipe.title ,
            publisher:recipe.publisher, 
            source:recipe.source_url, CHANGED
            image:recipe.image_url, CHANGED
            servings:recipe.servings, 
            cookingTime:recipe.cooking_time, CHANGED
            ingredients:recipe.ingredients
        }

        console.log(recipe)

    }
    catch(err)
    {
        console.error(err.message)
    }
}

showRecipe();
 fetch(`${url}5ed6604591c37cdc054bcd09`)
 .then(response => {
     console.log(response)
     if(!response.ok) throw new Error('My Error'); 
    
     return response.json(); 
 })
 .then(responseBody => {
     console.log(responseBody)


})
.catch(err => console.log(err.message))





