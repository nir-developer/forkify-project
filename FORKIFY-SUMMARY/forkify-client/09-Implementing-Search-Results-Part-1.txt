LECTURE: 297 

KEY NOTES: 
   
   - STATE:
        
        - Both the search results and the query keyword of the user should be a property of the search  state object
        - the query should be kept in the state - for maybe later I will need it to add analatics etc for most search query
        - THE STATE PROPERTIES HAVE DEFAULT VALUES AS BELOW
        
                state = {
                  recipe:{}
                  search:{
                  query:'',
                  results:[]
                 }
                }


    - View: searchView.js :
        - this view does not render anything 
        - it should return the content of the search query from the search input in the UI 
        -> create the addHandlerSearch function instead of addHandlerRender() 
        


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- REVIEW :ARCHITECTURE (currently implemented)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

FEATURE 1: SEARCH FUNCTIONALITY: 
        
    Based on the first  User story : Search for recipes : 

            1.1 [IMPLEMENTED ALREADY] Display the selected recipe with ALL recipe  data such as cooking time, servings, ingredients)

                I implemented the 2 features in the ARCHITECTURE: 
                   
                   - Handling the event of user selects a recipe by clicking the links(hardcoded links on the UI search results) 
                        by loading the selected recipe from the API(and store them in the Model state object) and render it on the UI recipe component 

                   - Handling the event of Page loads with recipe id(when user cop the URL with a recipe id to different browser tab)




            1.1 [IMPLEMENTING THIS LECTURE]:Search functionality: input field to send request to API with searched keyword : IMPLEMENTED IN THIS LECTURE 

            
            1.2 [IMPLEMENTING NEXT LECTURE]Display results with pagination(user friendly in case there are many results)

           
           
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   THIS LECTURE AND THE NEXT ONE: 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

        1. PART 1:(this lecture) : 

                Implement handling the event of user searching for a recipes 
                
                By loading the recipes from the API and print the search results by controller 
               
                (NO RENDERING yet)


        APP FLOW TO BE IMPLEMENTED: 

        1.User: type a key word in the search form in UI(searchView class) 

        2.View:SearchView: Invokes it's handler function and pass it the user query input (handler set by the controller already on startup) 

        3.Controller:controlSearchResults : Invokes the loadSearchResults(query) of the Model and await 

        4. Model: Invokes the getJSON() function(of helper) : 
                update the query state (state.search.query)
                fetch search results from the API - await it and the update the state (state.search.results) 
        

        5.Controller: Takes the results from the model.state.search.results 
           AND PRINT TO CONSOLE
         - NOT PASSING TO THE VIEW FOR RENDERING YET - ONLY NEXT LECTURE


        







         2.PART 2(next lecture) :  
                    Pagination 

>>>>>>>>>>>>>>>>>>>
TASK LIST: 
>>>>>>>>>>>>>

        1.Model
                1.1 Add a new property to the state: search:{query:'', results:[]}
                
                1.2  Create the loadSearchResults(query)  async function
                     - store the query paramter in the state: state.search.query 
                     -load the search results and store them with the query  in  the state.search object 
                     - Rethrow the error thrown by the getJSON - to reject the promise - so the real error will catched by the controller caller 
                     (NOTE - THE API DOES NOT THROW WHEN NO RECIPE WAS FOUND - IT RETURNS EMPTY ARRAY)

        2.Controller: 
                2.1 Create the new controller function - controlSearchResults: 
                        - Call the model.loadSearchResults('test')


        3.View: 
               3.1  Create a new View for the search bar - a  class SearchView in the searchView.js 
                    Like before - dont export the class- but an instance - to not creating more than one in
               3.2 SELECT THE '.search' element - not the search__input
               3.3 Create the public method: getSearchQuery() - to return the search__filed.val 


        4.Controller: update the controlSearchResults:
                -first get the search  input from the SearchView by searchView.getQuery()
                -update init() : SUBSCRIBE the controlSearchResults to the SearchView publisher 


        5.View:  Create the addHandlerSearch(handler)  
                - Listen to the submit event on the search form and attach handler 
                - NOTE: do I have to preventDefault() on submit? 
                - PREVENT DEFAULT FORM SUBMIT 
                - Call the handler 
                - Create a PRIVATE method to clear the input : invoke it from the getQuery- after getting the query from the input
        

        6. TEST: GREAT!
                 THE CONTROLLER GETS CALLED ON SUBMIT - WHICH TRIGGERS THE MODEL TO FETCH SEARCH RESULTS! 




                
